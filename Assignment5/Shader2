// url: https://goo.gl/4bw7TD
// Moving with color changing.
// SHADER 2
// FRAGMENT
precision highp float;
uniform float time;
varying vec3 fNormal;
varying vec3 uPos;

void main()
{
  float ys = uPos.y*5.0 - floor(uPos.y*5.0);
  float xs = uPos.x*5.0 - floor(uPos.x*5.0);
  float zs = uPos.z*5.0 - floor(uPos.z*5.0);

  vec3 direction = vec3(xs,ys,zs);
  
  float xc = smoothstep(0.0,1.0,xs);
  float yc = smoothstep(0.0,1.0,ys);
  float zc = smoothstep(0.0,1.0,zs);
  
  vec3 color = vec3(xc, yc, zc);
  float dl = max(0.0, dot(normalize(direction), fNormal));
  
  gl_FragColor = vec4(direction * color, 0.3);
}

// VERTEX
precision highp float;
attribute vec3 position;
attribute vec3 normal;
uniform float time;
uniform mat3 normalMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
varying vec3 fNormal;
varying vec3 fPosition;
varying vec3 uPos;

float xMotion(float time) 
{ 
  return 1.0*(sin(20.0*time));
}

float yMotion(float time) 
{ 
  return 1.0*(cos(20.0*time));
}

float zMotion(float time) 
{ 
  return 1.0*(cos(20.0*time));
}

void main()
{
  fNormal = normalize(normalMatrix * normal);
  vec4 pos = vec4(position.x + xMotion(1.0 * time), position.y + yMotion(1.0 * time), position.z + zMotion(1.0 * time), 1.0);
  uPos = pos.xyz;
  pos = modelViewMatrix * pos;
  fPosition = pos.xyz;
  gl_Position = projectionMatrix * pos;
} 
